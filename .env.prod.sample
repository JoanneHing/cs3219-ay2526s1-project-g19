# =============================================================================
# PeerPrep Microservices - Production Environment (AWS ECS)
# =============================================================================
# Copy this file to .env.prod and fill in actual production values
# DO NOT commit .env.prod with real secrets to version control!
# =============================================================================

# -----------------------------------------------------------------------------
# Environment Type
# -----------------------------------------------------------------------------
ENVIRONMENT=production

# -----------------------------------------------------------------------------
# Service Ports (Production - Internal to ECS tasks)
# -----------------------------------------------------------------------------
# All backend services expose port 8000 internally
# Frontend uses port 80 (nginx)
FRONTEND_PORT=80
FRONTEND_INTERNAL_PORT=80
QUESTION_SERVICE_PORT=8000
MATCHING_SERVICE_PORT=8000
HISTORY_SERVICE_PORT=8000
USER_SERVICE_PORT=8000
COLLABORATION_SERVICE_PORT=8000
CHAT_SERVICE_PORT=8000

# -----------------------------------------------------------------------------
# Service-to-Service Communication (ECS Service Discovery)
# -----------------------------------------------------------------------------
# Format: http://<service-name>.<namespace>.internal:8000
# Namespace: peerprep-prod (configured in ECS service discovery)
# These URLs are used by backend services to communicate with each other

USER_SERVICE_URL=http://user-service.peerprep-prod.internal:8000
QUESTION_SERVICE_URL=http://question-service.peerprep-prod.internal:8000
MATCHING_SERVICE_URL=http://matching-service.peerprep-prod.internal:8000
HISTORY_SERVICE_URL=http://history-service.peerprep-prod.internal:8000
COLLABORATION_SERVICE_URL=http://collaboration-service.peerprep-prod.internal:8000
CHAT_SERVICE_URL=http://chat-service.peerprep-prod.internal:8000

# -----------------------------------------------------------------------------
# Frontend Nginx Proxy Targets
# -----------------------------------------------------------------------------
# These are substituted via envsubst when nginx container starts
# Format: <service-name>.<namespace>.internal (without http://)
NGINX_USER_SERVICE_HOST=user-service.peerprep-prod.internal
NGINX_QUESTION_SERVICE_HOST=question-service.peerprep-prod.internal
NGINX_MATCHING_SERVICE_HOST=matching-service.peerprep-prod.internal
NGINX_HISTORY_SERVICE_HOST=history-service.peerprep-prod.internal
NGINX_COLLABORATION_SERVICE_HOST=collaboration-service.peerprep-prod.internal
NGINX_CHAT_SERVICE_HOST=chat-service.peerprep-prod.internal

# -----------------------------------------------------------------------------
# Redis Configuration (AWS ElastiCache)
# -----------------------------------------------------------------------------
# IMPORTANT: Replace with your actual ElastiCache endpoint
# Format: <cluster-name>.xxxxxx.ng.0001.<region>.cache.amazonaws.com
MATCHING_REDIS_HOST=peerprep-redis.xxxxxx.ng.0001.use1.cache.amazonaws.com
MATCHING_REDIS_PORT=6379
COLLABORATION_REDIS_HOST=peerprep-redis.xxxxxx.ng.0001.use1.cache.amazonaws.com
COLLABORATION_REDIS_PORT=6379
CHAT_REDIS_HOST=peerprep-redis.xxxxxx.ng.0001.use1.cache.amazonaws.com
CHAT_REDIS_PORT=6379

# Redis URLs for Services
# Using different database numbers for isolation
MATCHING_REDIS_URL=redis://peerprep-redis.xxxxxx.ng.0001.use1.cache.amazonaws.com:6379/0
COLLABORATION_REDIS_URL=redis://peerprep-redis.xxxxxx.ng.0001.use1.cache.amazonaws.com:6379/1
CHAT_REDIS_URL=redis://peerprep-redis.xxxxxx.ng.0001.use1.cache.amazonaws.com:6379/2

# -----------------------------------------------------------------------------
# Database Configuration (AWS RDS PostgreSQL)
# -----------------------------------------------------------------------------
# IMPORTANT: Replace with your actual RDS endpoint
# Format: <db-instance>.xxxxxx.<region>.rds.amazonaws.com
QUESTION_DB_HOST=peerprep-db.xxxxxx.us-east-1.rds.amazonaws.com
QUESTION_DB_PORT=5432
QUESTION_DB_NAME=question_db
QUESTION_DB_USER=peerprep_admin
QUESTION_DB_PASSWORD=CHANGEME_SECURE_PASSWORD_MIN_20_CHARS

MATCHING_DB_HOST=peerprep-db.xxxxxx.us-east-1.rds.amazonaws.com
MATCHING_DB_PORT=5432
MATCHING_DB_NAME=matching_db
MATCHING_DB_USER=peerprep_admin
MATCHING_DB_PASSWORD=CHANGEME_SECURE_PASSWORD_MIN_20_CHARS

HISTORY_DB_HOST=peerprep-db.xxxxxx.us-east-1.rds.amazonaws.com
HISTORY_DB_PORT=5432
HISTORY_DB_NAME=history_db
HISTORY_DB_USER=peerprep_admin
HISTORY_DB_PASSWORD=CHANGEME_SECURE_PASSWORD_MIN_20_CHARS

USER_DB_HOST=peerprep-db.xxxxxx.us-east-1.rds.amazonaws.com
USER_DB_PORT=5432
USER_DB_NAME=user_db
USER_DB_USER=peerprep_admin
USER_DB_PASSWORD=CHANGEME_SECURE_PASSWORD_MIN_20_CHARS

# Database URLs (PostgreSQL connection strings)
QUESTION_DATABASE_URL=postgresql://peerprep_admin:CHANGEME_SECURE_PASSWORD_MIN_20_CHARS@peerprep-db.xxxxxx.us-east-1.rds.amazonaws.com:5432/question_db
MATCHING_DATABASE_URL=postgresql://peerprep_admin:CHANGEME_SECURE_PASSWORD_MIN_20_CHARS@peerprep-db.xxxxxx.us-east-1.rds.amazonaws.com:5432/matching_db
HISTORY_DATABASE_URL=postgresql://peerprep_admin:CHANGEME_SECURE_PASSWORD_MIN_20_CHARS@peerprep-db.xxxxxx.us-east-1.rds.amazonaws.com:5432/history_db
USER_DATABASE_URL=postgresql://peerprep_admin:CHANGEME_SECURE_PASSWORD_MIN_20_CHARS@peerprep-db.xxxxxx.us-east-1.rds.amazonaws.com:5432/user_db

# -----------------------------------------------------------------------------
# Django Configuration (Production)
# -----------------------------------------------------------------------------
DEBUG=false
# IMPORTANT: Generate a secure random key (min 50 characters)
# Example: python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
SECRET_KEY=CHANGEME_PRODUCTION_SECRET_KEY_MIN_50_CHARS_RANDOM_GENERATE_WITH_DJANGO

# IMPORTANT: Replace with your actual domain(s)
# Comma-separated list of allowed hosts
ALLOWED_HOSTS=peerprep.com,*.peerprep.com,api.peerprep.com,10.0.0.0/8

# -----------------------------------------------------------------------------
# Frontend Environment Variables (Production)
# -----------------------------------------------------------------------------
# Browser accesses ALL APIs through Nginx proxy paths (same as development)
# These are used during build time (npm run build)
NODE_ENV=production

# Use proxy paths - consistent across all environments
VITE_QUESTION_SERVICE_URL=/question-service-api
VITE_MATCHING_SERVICE_URL=/matching-service-api
VITE_HISTORY_SERVICE_URL=/history-service-api
VITE_USER_SERVICE_URL=/user-service-api
VITE_COLLABORATION_SERVICE_URL=/collaboration-service-api
VITE_CHAT_SERVICE_URL=/chat-service-api

# -----------------------------------------------------------------------------
# Frontend Build Configuration
# -----------------------------------------------------------------------------
# Use production stage in Dockerfile (nginx instead of vite dev server)
FRONTEND_BUILD_STAGE=production

# -----------------------------------------------------------------------------
# AWS Configuration (Optional - if services need AWS SDK)
# -----------------------------------------------------------------------------
# AWS_REGION=us-east-1
# AWS_DEFAULT_REGION=us-east-1

# -----------------------------------------------------------------------------
# Logging & Monitoring (Optional)
# -----------------------------------------------------------------------------
# LOG_LEVEL=INFO
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# -----------------------------------------------------------------------------
# Security Headers & CORS (Optional)
# -----------------------------------------------------------------------------
# CORS_ALLOWED_ORIGINS=https://peerprep.com,https://www.peerprep.com
# CSRF_TRUSTED_ORIGINS=https://peerprep.com,https://www.peerprep.com

# =============================================================================
# DEPLOYMENT NOTES
# =============================================================================
# 1. Store this file securely (AWS Secrets Manager or Parameter Store)
# 2. Never commit actual production secrets to git
# 3. Use IAM roles for ECS tasks instead of hardcoded AWS credentials
# 4. Rotate database passwords regularly
# 5. Use SSL/TLS for all database and Redis connections in production
# 6. Enable encryption at rest for RDS and ElastiCache
# =============================================================================
