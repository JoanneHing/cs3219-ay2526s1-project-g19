# Collaboration Service - Standalone Configuration
# Run independently: cd collaboration_service && docker-compose up

services:
  collaboration-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: peerprep_collaboration_service
    ports:
      - "${COLLABORATION_SERVICE_PORT:-8005}:8000"
    environment:
      - DEBUG=${DEBUG:-true}
      - PORT=8000
      - REDIS_URL=${COLLABORATION_REDIS_URL}
      - REDIS_HOST=${COLLABORATION_REDIS_HOST:-collaboration_redis}
      - REDIS_PORT=${COLLABORATION_REDIS_PORT:-6379}
      # Service-to-service communication URLs
      - USER_SERVICE_URL=${USER_SERVICE_URL:-http://user-service:8000}
      - QUESTION_SERVICE_URL=${QUESTION_SERVICE_URL:-http://question-service:8000}
      - CHAT_SERVICE_URL=${CHAT_SERVICE_URL:-http://chat-service:8000}
      - SESSION_SERVICE_URL=${SESSION_SERVICE_URL:-http://session-service:8000}
      - INACTIVE_SESSION_TIMEOUT=300
    volumes:
      - ./:/app:rw
    networks:
      - shared_network
      - collaboration_network
    depends_on:
      collaboration_redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    env_file:
      - ../.env

  collaboration_redis:
    image: redis:7-alpine
    container_name: peerprep_collaboration_redis
    command: redis-server --appendonly yes
    volumes:
      - collaboration_redis_data:/data
    networks:
      - collaboration_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - ../.env

volumes:
  collaboration_redis_data:
    name: peerprep_collaboration_redis_data

networks:
  shared_network:
  collaboration_network:
    driver: bridge
    name: peerprep_collaboration_network
