name: Deploy to EC2

on:
  push:
    branches:
      - prod/ec2-prod  # Deploy when pushing to this branch
  workflow_dispatch:  # Allow manual trigger from GitHub UI

jobs:
  deploy:
    name: Deploy to EC2 via SSM
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get EC2 Instance ID
        id: get-instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters \
              "Name=tag:Project,Values=peerprep" \
              "Name=tag:Environment,Values=ec2-prod" \
              "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].InstanceId' \
            --output text)

          if [ "$INSTANCE_ID" == "None" ] || [ -z "$INSTANCE_ID" ]; then
            echo "Error: No running EC2 instance found with tags Project=peerprep, Environment=ec2-prod"
            exit 1
          fi

          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "Found instance: $INSTANCE_ID"

      - name: Deploy via AWS Systems Manager
        run: |
          INSTANCE_ID="${{ steps.get-instance.outputs.instance_id }}"

          echo "Deploying to instance: $INSTANCE_ID"

          # Prepare SSM command list (string list) so the agent builds a Bash script
          python <<'PY'
          from pathlib import Path
          import json

          commands = [
              "#!/bin/bash",
              "set -euo pipefail",
              'echo "====== PeerPrep Deployment Started ======"',
              'echo "Time: $(date)"',
              'echo "Branch: ${{ github.ref_name }}"',
              'echo "Commit: ${{ github.sha }}"',
              'echo ""',
              "cd /opt/peerprep",
              'echo "Pulling latest changes..."',
              "git fetch origin",
              "git reset --hard origin/${{ github.ref_name }}",
              'echo ""',
              'echo "Stopping containers..."',
              "docker compose down --remove-orphans",
              'echo ""',
              'echo "Rebuilding and starting containers..."',
              "docker compose up -d --build",
              'echo ""',
              'echo "Waiting for services to be healthy..."',
              "sleep 10",
              'echo ""',
              'echo "Container status:"',
              "docker compose ps",
              'echo ""',
              'echo "====== Deployment Complete ======"',
              'echo "Application URL: http://98.91.82.243"'
          ]

          Path("/tmp/ssm-commands.json").write_text(json.dumps({"commands": commands}, indent=2))
          PY

          # Execute deployment via SSM
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters file:///tmp/ssm-commands.json \
            --query 'Command.CommandId' \
            --output text)

          echo "SSM Command ID: $COMMAND_ID"
          echo "Waiting for deployment to complete..."

          # Wait for command to complete (max ~5 minutes)
          timeout 300 aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" || true

          # Get command status and output
          STATUS=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query 'Status' \
            --output text)

          OUTPUT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query 'StandardOutputContent' \
            --output text)

          ERROR_OUTPUT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query 'StandardErrorContent' \
            --output text)

          echo ""
          echo "====== Deployment Output ======"
          echo "$OUTPUT"

          if [ ! -z "$ERROR_OUTPUT" ]; then
            echo ""
            echo "====== Errors ======"
            echo "$ERROR_OUTPUT"
          fi

          echo ""
          echo "Command Status: $STATUS"

          if [ "$STATUS" != "Success" ]; then
            echo "Deployment failed!"
            exit 1
          fi

          echo "Deployment successful!"

      - name: Deployment Summary
        if: always()
        run: |
          echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Instance ID**: \`${{ steps.get-instance.outputs.instance_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Application URL**: http://98.91.82.243" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View logs: \`ssh ubuntu@98.91.82.243 'docker compose -f /opt/peerprep/docker-compose.yml logs -f'\`" >> $GITHUB_STEP_SUMMARY
