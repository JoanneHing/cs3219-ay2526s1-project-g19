# Matching Service - Standalone Configuration
# Run independently: cd matching_service && docker-compose up

services:
  matching-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: peerprep_matching_service
    ports:
      - "${MATCHING_SERVICE_PORT:-8002}:8000"
    env_file:
      - .env
      - ../.env
    environment:
      - DEBUG=${DEBUG:-true}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,matching-service}
      # Service-to-service communication URLs
      - USER_SERVICE_URL=${USER_SERVICE_URL:-http://user-service:8000}
      - QUESTION_SERVICE_URL=${QUESTION_SERVICE_URL:-http://question-service:8000}
    volumes:
      - ./:/app:rw
    networks:
      - shared_network
      - matching_network
    depends_on:
      matching_redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  matching_redis:
    image: redis:7-alpine
    container_name: peerprep_matching_redis
    command: redis-server --appendonly yes --notify-keyspace-events Ex
    volumes:
      - matching_redis_data:/data
    networks:
      - matching_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
  matching_consumer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: peerprep_matching_kafka
    command: python -m kafka.consumers.session_created
    volumes:
      - ./:/app:rw
    networks:
      - matching_network
    env_file:
      - .env
      - ../.env
    depends_on:
      matching_redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  matching_redis_data:
    name: peerprep_matching_redis_data

networks:
  shared_network:
  matching_network:
    driver: bridge
    name: peerprep_matching_network
